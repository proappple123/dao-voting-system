type voteResult = 
 variant {
   err: VoteErr;
   ok: VoteOk;
 };
type submitProposalResult = 
 variant {
   err: CreateProposalErr;
   ok: CreateProposalOk;
 };
type VoteOk = 
 variant {
   ProposalAccepted;
   ProposalOpen;
   ProposalRefused;
 };
type VoteErr = 
 variant {
   AlreadyVoted;
   NotDAOMember;
   NotEnoughTokens;
   ProposalEnded;
   ProposalNotFound;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Status = 
 variant {
   Accepted;
   Open;
   Rejected;
 };
type Proposal = 
 record {
   creator: principal;
   id: nat;
   manifest: text;
   status: Status;
   voteNo: int;
   voteYes: int;
   voters: vec principal;
   votes: int;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type CreateProposalOk = nat;
type CreateProposalErr = 
 variant {
   NotDAOMember;
   NotEnoughTokens;
 };
service : {
  getAllProposals: () -> (vec record {
                                nat;
                                Proposal;
                              }) query;
  getProposal: (nat) -> (opt Proposal) query;
  http_request: (HttpRequest) -> (HttpResponse) query;
  submitProposal: (text) -> (submitProposalResult);
  vote: (nat, bool) -> (voteResult);
}
